<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <OutputType>Library</OutputType>
    <LangVersion>10</LangVersion>
    <Nullable>enable</Nullable>
    <WarningsAsErrors>nullable</WarningsAsErrors>
    <Copyright>Copyright Â© nicoco007 2022</Copyright>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <Optimize>false</Optimize>
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <Optimize>true</Optimize>
    <DebugType>none</DebugType>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="IPA.Injector">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\IPA.Injector.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="IPA.Loader">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\IPA.Loader.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Main">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\Main.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\UnityEngine.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\UnityEngine.CoreModule.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Zenject">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\Zenject.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Zenject-usage">
      <HintPath>$(BeatSaberDir)\Beat Saber_Data\Managed\Zenject-usage.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="manifest.json" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(ProjectName).csproj.user" />
  </ItemGroup>

  <ProjectExtensions><VisualStudio><UserProperties manifest_1json__JsonSchema="https://json-schema.org/draft-04/schema" /></VisualStudio></ProjectExtensions>

  <ItemGroup>
    <PackageReference Include="BeatSaberModdingTools.Tasks" Version="1.4.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.CodeStyle" Version="4.3.0-3.final">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Unity.Analyzers" Version="1.15.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Display a warning if BeatSaberModdingTools.Tasks is not installed. -->
  <Target Name="CheckBSMTInstalled" AfterTargets="BeforeBuild" Condition="'$(BSMTTaskAssembly)' == ''">
    <Warning Text="The BeatSaberModdingTools.Tasks NuGet package isn't installed. Advanced build targets will not work." />
  </Target>

  <!-- Run a build task to get info about the project used by later targets. -->
  <Target Name="GetProjectInfo" AfterTargets="CheckBSMTInstalled" DependsOnTargets="CheckBSMTInstalled" Condition="'$(BSMTTaskAssembly)' != ''">
    <GetManifestInfo>
      <Output TaskParameter="PluginVersion" PropertyName="PluginVersion" />
      <Output TaskParameter="GameVersion" PropertyName="GameVersion" />
      <Output TaskParameter="BasePluginVersion" PropertyName="BasePluginVersion" />
    </GetManifestInfo>
    <PropertyGroup>
      <Version>$(BasePluginVersion)</Version>
    </PropertyGroup>
    <GetCommitInfo ProjectDir="$(ProjectDir)">
      <Output TaskParameter="CommitHash" PropertyName="CommitHash" />
      <Output TaskParameter="Branch" PropertyName="Branch" />
      <Output TaskParameter="Modified" PropertyName="GitModified" />
    </GetCommitInfo>
  </Target>

  <Target Name="SetAssemblyVersion" AfterTargets="CheckBSMTInstalled">
    <GetManifestInfo>
      <Output TaskParameter="BasePluginVersion" PropertyName="BasePluginVersion" />
    </GetManifestInfo>

    <PropertyGroup>
      <Version>$(BasePluginVersion)</Version>
    </PropertyGroup>
  </Target>
  
  <!-- Copy the assembly and PDB to the Beat Saber folder. -->
  <Target Name="CopyToPlugins" AfterTargets="Build" Condition="'$(ContinuousIntegrationBuild)' != 'True'">
    <PropertyGroup>
      <PluginsDir>$(BeatSaberDir)\Plugins</PluginsDir>
    </PropertyGroup>
    <Message Text="Copying '$(TargetName).dll' to '$(PluginsDir)'." Importance="high" />
    <Copy SourceFiles="$(TargetPath)" DestinationFiles="$(PluginsDir)\$(TargetName).dll" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).pdb" DestinationFiles="$(PluginsDir)\$(TargetName).pdb" Condition="Exists('$(TargetDir)$(TargetName).pdb')" />
  </Target>

  <!-- Organize files for zipping -->
  <Target Name="AfterPublish" AfterTargets="Publish">
    <!-- make sure we have a clean slate -->
    <RemoveDir Directories="$(PublishDir)" />

    <!-- create Plugins folder and move plugin DLL/PDB inside -->
    <MakeDir Directories="$(PublishDir)Plugins" />
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(PublishDir)Plugins" />
    <Copy SourceFiles="$(TargetDir)$(TargetName).pdb" DestinationFolder="$(PublishDir)Plugins" Condition="Exists('$(TargetDir)$(TargetName).pdb')" />
  </Target>
</Project>